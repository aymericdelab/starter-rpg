import { RawArgs, Calldata, RpcProvider, Contract, Account, AccountInterface, AllowArray, Call, UniversalDetails, InvokeFunctionResponse, Result, CallContractResponse, TypedData } from 'starknet';
import { z } from 'zod';

/**
 * Enumeration representing various entry points or functions available in the World.
 */
declare enum WorldEntryPoints {
    get = "entity",// Retrieve a single entity
    set = "set_entity",// Set or update a single entity
    entities = "entities",// Retrieve multiple entities
    execute = "execute",// Execute a specific command
    registerSystem = "register_system",// Register a new system
    registerComponent = "register_model",// Register a new component
    model = "model",// Access a component
    system = "system",// Access a system
    metadataUri = "metadata_uri",// Retrieve metadata URI for a resource
    setMetadataUri = "set_metadata_uri",// Set metadata URI for a resource
    registerModel = "register_model",// Register a new model
    deployContract = "deploy_contract",// Deploy a contract and return its address
    upgradeContract = "upgrade_contract",// Upgrade a contract
    uuid = "uuid",// Retrieve the UUID of the world
    emit = "emit",// Emit an event
    entityIds = "entity_ids",// Retrieve entity IDs for a model
    setExecutor = "set_executor",// Set executor for the world
    executor = "executor",// Retrieve the executor's address
    base = "base",// Retrieve base class hash
    deleteEntity = "delete_entity",// Delete an entity
    isOwner = "is_owner",// Check if an address is an owner of a resource
    grantOwner = "grant_owner",// Grant ownership of a resource
    revokeOwner = "revoke_owner",// Revoke ownership of a resource
    isWriter = "is_writer",// Check if a system is a writer for a model
    grantWriter = "grant_writer",// Grant writer permission
    revokeWriter = "revoke_writer"
}
/**
 * World interface: An interface that defines the methods that a world must implement.
 * Dojo v0.4.0
 */
interface IWorld {
    metadataUri?(resource: string): Promise<Array<string>>;
    setMetadataUri?(resource: string, uri: Array<string>): Promise<void>;
    model?(name: string): Promise<string>;
    registerModel?(classHash: string): Promise<void>;
    deployContract?(salt: string, classHash: string): Promise<string>;
    upgradeContract?(address: string, classHash: string): Promise<string>;
    uuid?(): Promise<string>;
    entity?(model: string, keys: Array<string>, offset: number, length: number, layout: Array<number>): Promise<Array<bigint>>;
    setEntity?(model: string, keys: Array<string>, offset: number, values: Array<string>, layout: Array<number>): Promise<void>;
    entities?(model: string, index: string | null, values: Array<string>, valuesLength: number, valuesLayout: Array<number>): Promise<Array<Array<bigint>>>;
    entityIds?(model: string): Promise<Array<string>>;
    setExecutor?(contractAddress: string): Promise<void>;
    executor?(): Promise<string>;
    base?(): Promise<string>;
    deleteEntity?(model: string, keys: Array<string>, layout: Array<number>): Promise<void>;
    isOwner?(address: string, resource: string): Promise<boolean>;
    grantOwner?(address: string, resource: string): Promise<void>;
    revokeOwner?(address: string, resource: string): Promise<void>;
    isWriter?(model: string, system: string): Promise<boolean>;
    grantWriter?(model: string, system: string): Promise<void>;
    revokeWriter?(model: string, system: string): Promise<void>;
    worldAge?(): Promise<bigint>;
}
type DojoCall = {
    contractName: string;
    entrypoint: string;
    calldata: RawArgs | Calldata;
};

/**
 * Provider class: An abstract base class for all providers.
 * It implements the ICommands interface, ensuring that any class deriving from Provider
 * will have implementations for the entity and entities methods.
 */
declare abstract class Provider implements IWorld {
    private readonly worldAddress;
    /**
     * Constructor: Initializes the Provider with a given world address.
     *
     * @param {string} worldAddress - The address of the world.
     */
    constructor(worldAddress: string);
    /**
     * Abstract method to retrieve a single entity's details.
     * Classes extending Provider should provide a concrete implementation for this method.
     *
     * @param {string} component - The component to query.
     * @param {Query} query - The query details.
     * @param {number} offset - Starting offset.
     * @param {number} length - Length to retrieve.
     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.
     */
    abstract entity(model: string, keys: Array<string>, offset: number, length: number, layout: Array<number>): Promise<Array<bigint>>;
    /**
     * Abstract method to retrieve multiple entities' details.
     * Classes extending Provider should provide a concrete implementation for this method.
     *
     * @param {string} component - The component to query.
     * @param {number} length - Number of entities to retrieve.
     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entities' details.
     */
    abstract entities(model: string, index: string | null, values: Array<string>, valuesLength: number, valuesLayout: Array<number>): Promise<Array<Array<bigint>>>;
    /**
     * Retrieves the stored world address.
     *
     * @returns {string} - The address of the world.
     */
    getWorldAddress(): string;
}

/** Signature of a logging function */
interface LogFn {
    (message?: any, ...optionalParams: any[]): void;
}
/** Basic logger interface */
interface Logger {
    info: LogFn;
    warn: LogFn;
    error: LogFn;
}
/** Log levels */
type LogLevel = "info" | "warn" | "error" | "none";
/** Logger which outputs to the browser console */
declare class ConsoleLogger implements Logger {
    readonly info: LogFn;
    readonly warn: LogFn;
    readonly error: LogFn;
    constructor(options?: {
        level?: LogLevel;
    });
}

/**
 * DojoProvider: The DojoProvider is an execution provider for dojo worlds. It allows you to easily interact with a dojo world via the Starknet.js library.
 * ```ts
 * import { DojoProvider } from "@dojoengine/core";
 *
 * const provider = new DojoProvider(
 *      manifest
 * );
 * ```
 */
declare class DojoProvider extends Provider {
    provider: RpcProvider;
    contract: Contract;
    manifest: any;
    logger: ConsoleLogger;
    /**
     * Constructor: Initializes the DojoProvider with the given world address, manifest and URL.
     *
     * @param {string} world_address - Address of the world.
     * @param {string} [url=LOCAL_KATANA] - RPC URL (defaults to LOCAL_KATANA).
     */
    constructor(manifest?: any, url?: string, logLevel?: LogLevel);
    /**
     * Retrieves a single entity's details.
     *
     * @param {string} model - The component to query.
     * @param {Array<string>} keys - The keys to query.
     * @param {number} [offset=0] - Starting offset (defaults to 0).
     * @param {number} [length=0] - Length to retrieve (defaults to 0).
     * @returns {Promise<Array<bigint>>} - A promise that resolves to an array of bigints representing the entity's details.
     */
    entity(model: string, keys: Array<string>, offset: number | undefined, length: number | undefined, layout: Array<number>): Promise<Array<bigint>>;
    /**
     * Retrieves multiple entities' details.
     *
     * @param {string} model - The component to query.
     * @param {number} index - The index to query.
     * @param {Array<string>} values - The values to query.
     * @param {number} valuesLength - The values length to query.
     * @param {Array<number>} valuesLayout - The values layout to query.
     */
    entities(model: string, index: string, values: Array<string>, valuesLength: number, valuesLayout: Array<number>): Promise<Array<Array<bigint>>>;
    /**
     * Retrieves a models
     *
     * @param {string} name - Name of the model.
     * @returns {Promise<bigint>} - A promise that resolves to a bigint representing the model's details.
     */
    model(name: string): Promise<bigint>;
    /**
     * Retrieves current uuid from the world contract.
     *
     * @returns {Promise<number>} - A promise that resolves to the world uuid
     * @throws {Error} - Throws an error if the call fails.
     *
     * @example
     * const uuid = await provider.uuid();
     * console.log(uuid);
     * // => 6
     *
     */
    uuid(): Promise<number>;
    /**
     * Executes a function with the given parameters.
     * This function is a wrapper around the Starknet.js Account.execute function, but is more convenient to use.
     *
     * ```ts
     * await provider.execute(signer, { contractName, entrypoint, calldata });
     * await provider.execute(signer, { contractAddress, entrypoint, calldata });
     * await provider.execute(signer, [{ contractName, entrypoint, calldata }, { contractAddress, entrypoint, calldata }]);
     * ```
     * @param {Account} account - The account to use.
     * @param {AllowArray<DojoCall | Call>} call - The call or calls
     * @param {UniversalDetails} details - https://github.com/starknet-io/starknet.js/blob/5efa196017ee8f761ae837ecac9c059da8f3e09a/src/types/account.ts#L26
     * @returns {Promise<InvokeFunctionResponse>} - A promise that resolves to the response of the function execution.
     */
    execute(account: Account | AccountInterface, call: AllowArray<DojoCall | Call>, nameSpace: string, details?: UniversalDetails): Promise<InvokeFunctionResponse>;
    /**
     * Calls a function with the given parameters and return parsed results for a DojoCall.
     *
     * ```ts
     * let parsedResult = await provider.call({ contractName, entrypoint, calldata });
     * ```
     * @param {DojoCall | Call} call - The dojoCall or call
     * @returns {Promise<Result>} - A promise that resolves to the response of the function call.
     */
    call(nameSpace: string, call: DojoCall | Call): Promise<Result>;
    /**
     * Calls a function with the given parameters.
     *
     * @param {string} nameSpace - The namespace of the contract within the world
     * @param {DojoCall | Call} call - The dojoCall or call
     * @returns {Promise<CallContractResponse>} - A promise that resolves to the response of the function call.
     * @throws {Error} - Throws an error if the call fails.
     *
     * @example
     * const result = await provider.callRaw("namespace", { contractAddress, entrypoint, calldata });
     */
    callRaw(nameSpace: string, call: DojoCall | Call): Promise<CallContractResponse>;
}

/**
 * Gets a contract from a manifest by name.
 *
 * @param {any} manifest - The manifest object.
 * @param {string} name - The name of the contract.
 * @returns {any} The contract object.
 *
 */
declare const getContractByName: (manifest: any, nameSpace: string, name: string) => any;
/**
 * Convert a DojoCall to a Call replacing contractName with contractAddress
 *
 * @param {any} manifest - The manifest object.
 * @param {DojoCall | Call} call - A DojoCall or Call
 * @returns {Call} The contract object.
 *
 */
declare const parseDojoCall: (manifest: any, nameSpace: string, call: DojoCall | Call) => Call;
/**
 * Parses a model name into a class name.
 *
 * @param {any} model - The model object.
 * @returns {string} The class name.
 *
 */
declare const parseModelName: (model: any) => any;
/**
 * Creates a model typed data object.
 *
 * @param {any} model - The model object.
 * @returns {any} The model typed data object.
 *
 */
declare const createModelTypedData: (name: string, model: any) => TypedData;

type DojoConfig = ReturnType<typeof createDojoConfig>;
interface DojoConfigParams {
    rpcUrl?: string;
    toriiUrl?: string;
    relayUrl?: string;
    masterAddress?: string;
    masterPrivateKey?: string;
    accountClassHash?: string;
    feeTokenAddress?: string;
    manifest: any;
}
/**
 * Create Dojo Config: Creates a Dojo Config object. If no parameters are passed, it will use the default values of the current Dojo version.
 */
declare function createDojoConfig({ manifest, ...config }: DojoConfigParams): {
    rpcUrl: string;
    toriiUrl: string;
    relayUrl: string;
    masterAddress: string;
    masterPrivateKey: string;
    accountClassHash: string;
    feeTokenAddress: string;
    manifest: any;
};

declare const LOCAL_KATANA = "http://localhost:5050";
declare const LOCAL_RELAY = "";
declare const LOCAL_TORII = "http://0.0.0.0:8080";
declare const KATANA_PREFUNDED_ADDRESS = "0xb3ff441a68610b30fd5e2abbf3a1548eb6ba6f3559f2862bf2dc757e5828ca";
declare const KATANA_PREFUNDED_PRIVATE_KEY = "0x2bbf4f9fd0bbb2e60b0316c1fe0b76cf7a4d0198bd493ced9b8df2a3a24d68a";
declare const KATANA_CLASS_HASH = "0x05400e90f7e0ae78bd02c77cd75527280470e2fe19c54970dd79dc37a9d3645c";
declare const KATANA_ETH_CONTRACT_ADDRESS = "0x49d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7";

declare const manifestSchema: z.ZodObject<{
    world: z.ZodObject<z.objectUtil.extendShape<{
        class_hash: z.ZodString;
        name: z.ZodString;
        abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"impl">;
            name: z.ZodString;
            interface_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "impl";
            interface_name: string;
        }, {
            name: string;
            type: "impl";
            interface_name: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"struct">;
            name: z.ZodString;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"enum">;
            name: z.ZodString;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"interface">;
            name: z.ZodString;
            items: z.ZodArray<z.ZodObject<{
                type: z.ZodLiteral<"function">;
                name: z.ZodString;
                inputs: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    type: string;
                }, {
                    name: string;
                    type: string;
                }>, "many">;
                outputs: z.ZodArray<z.ZodObject<{
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                }, {
                    type: string;
                }>, "many">;
                state_mutability: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"constructor">;
            name: z.ZodString;
            inputs: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"struct">;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"enum">;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }>]>, "many">;
    }, {
        kind: z.ZodLiteral<"WorldContract">;
        address: z.ZodString;
        transaction_hash: z.ZodString;
        block_number: z.ZodNumber;
        seed: z.ZodString;
        metadata: z.ZodObject<{
            rpc_url: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            rpc_url: string;
        }, {
            rpc_url: string;
        }>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        transaction_hash: string;
        class_hash: string;
        block_number: number;
        address: string;
        kind: "WorldContract";
        seed: string;
        metadata: {
            rpc_url: string;
        };
    }, {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        transaction_hash: string;
        class_hash: string;
        block_number: number;
        address: string;
        kind: "WorldContract";
        seed: string;
        metadata: {
            rpc_url: string;
        };
    }>;
    base: z.ZodObject<z.objectUtil.extendShape<{
        class_hash: z.ZodString;
        name: z.ZodString;
        abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"impl">;
            name: z.ZodString;
            interface_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "impl";
            interface_name: string;
        }, {
            name: string;
            type: "impl";
            interface_name: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"struct">;
            name: z.ZodString;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"enum">;
            name: z.ZodString;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"interface">;
            name: z.ZodString;
            items: z.ZodArray<z.ZodObject<{
                type: z.ZodLiteral<"function">;
                name: z.ZodString;
                inputs: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    type: string;
                }, {
                    name: string;
                    type: string;
                }>, "many">;
                outputs: z.ZodArray<z.ZodObject<{
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                }, {
                    type: string;
                }>, "many">;
                state_mutability: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"constructor">;
            name: z.ZodString;
            inputs: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"struct">;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"enum">;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }>]>, "many">;
    }, {
        kind: z.ZodLiteral<"Class">;
        abi: z.ZodLiteral<null>;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        abi: null;
        class_hash: string;
        kind: "Class";
    }, {
        name: string;
        abi: null;
        class_hash: string;
        kind: "Class";
    }>;
    contracts: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        class_hash: z.ZodString;
        name: z.ZodString;
        abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"impl">;
            name: z.ZodString;
            interface_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "impl";
            interface_name: string;
        }, {
            name: string;
            type: "impl";
            interface_name: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"struct">;
            name: z.ZodString;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"enum">;
            name: z.ZodString;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"interface">;
            name: z.ZodString;
            items: z.ZodArray<z.ZodObject<{
                type: z.ZodLiteral<"function">;
                name: z.ZodString;
                inputs: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    type: string;
                }, {
                    name: string;
                    type: string;
                }>, "many">;
                outputs: z.ZodArray<z.ZodObject<{
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                }, {
                    type: string;
                }>, "many">;
                state_mutability: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"constructor">;
            name: z.ZodString;
            inputs: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"struct">;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"enum">;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }>]>, "many">;
    }, {
        kind: z.ZodLiteral<"DojoContract">;
        address: z.ZodString;
        reads: z.ZodArray<z.ZodUnknown, "many">;
        writes: z.ZodArray<z.ZodUnknown, "many">;
        computed: z.ZodArray<z.ZodUnknown, "many">;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        address: string;
        kind: "DojoContract";
        reads: unknown[];
        writes: unknown[];
        computed: unknown[];
    }, {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        address: string;
        kind: "DojoContract";
        reads: unknown[];
        writes: unknown[];
        computed: unknown[];
    }>, "many">;
    models: z.ZodArray<z.ZodObject<z.objectUtil.extendShape<{
        class_hash: z.ZodString;
        name: z.ZodString;
        abi: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            type: z.ZodLiteral<"impl">;
            name: z.ZodString;
            interface_name: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "impl";
            interface_name: string;
        }, {
            name: string;
            type: "impl";
            interface_name: string;
        }>, z.ZodObject<{
            type: z.ZodLiteral<"struct">;
            name: z.ZodString;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"enum">;
            name: z.ZodString;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"interface">;
            name: z.ZodString;
            items: z.ZodArray<z.ZodObject<{
                type: z.ZodLiteral<"function">;
                name: z.ZodString;
                inputs: z.ZodArray<z.ZodObject<{
                    name: z.ZodString;
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    name: string;
                    type: string;
                }, {
                    name: string;
                    type: string;
                }>, "many">;
                outputs: z.ZodArray<z.ZodObject<{
                    type: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    type: string;
                }, {
                    type: string;
                }>, "many">;
                state_mutability: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }, {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }, {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"constructor">;
            name: z.ZodString;
            inputs: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
            }, {
                name: string;
                type: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }, {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"struct">;
            members: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }, {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        }>, z.ZodObject<{
            type: z.ZodLiteral<"event">;
            name: z.ZodString;
            kind: z.ZodLiteral<"enum">;
            variants: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                type: z.ZodString;
                kind: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                name: string;
                type: string;
                kind: string;
            }, {
                name: string;
                type: string;
                kind: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }, {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        }>]>, "many">;
    }, {
        kind: z.ZodLiteral<"DojoModel">;
        members: z.ZodArray<z.ZodObject<{
            name: z.ZodString;
            type: z.ZodString;
            key: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            name: string;
            key: boolean;
            type: string;
        }, {
            name: string;
            key: boolean;
            type: string;
        }>, "many">;
    }>, "strip", z.ZodTypeAny, {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        members: {
            name: string;
            key: boolean;
            type: string;
        }[];
        kind: "DojoModel";
    }, {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        members: {
            name: string;
            key: boolean;
            type: string;
        }[];
        kind: "DojoModel";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    base: {
        name: string;
        abi: null;
        class_hash: string;
        kind: "Class";
    };
    world: {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        transaction_hash: string;
        class_hash: string;
        block_number: number;
        address: string;
        kind: "WorldContract";
        seed: string;
        metadata: {
            rpc_url: string;
        };
    };
    contracts: {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        address: string;
        kind: "DojoContract";
        reads: unknown[];
        writes: unknown[];
        computed: unknown[];
    }[];
    models: {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        members: {
            name: string;
            key: boolean;
            type: string;
        }[];
        kind: "DojoModel";
    }[];
}, {
    base: {
        name: string;
        abi: null;
        class_hash: string;
        kind: "Class";
    };
    world: {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        transaction_hash: string;
        class_hash: string;
        block_number: number;
        address: string;
        kind: "WorldContract";
        seed: string;
        metadata: {
            rpc_url: string;
        };
    };
    contracts: {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        address: string;
        kind: "DojoContract";
        reads: unknown[];
        writes: unknown[];
        computed: unknown[];
    }[];
    models: {
        name: string;
        abi: ({
            name: string;
            type: "impl";
            interface_name: string;
        } | {
            name: string;
            type: "struct";
            members: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "enum";
            variants: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "interface";
            items: {
                name: string;
                type: "function";
                inputs: {
                    name: string;
                    type: string;
                }[];
                outputs: {
                    type: string;
                }[];
                state_mutability: string;
            }[];
        } | {
            name: string;
            type: "constructor";
            inputs: {
                name: string;
                type: string;
            }[];
        } | {
            name: string;
            type: "event";
            members: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "struct";
        } | {
            name: string;
            type: "event";
            variants: {
                name: string;
                type: string;
                kind: string;
            }[];
            kind: "enum";
        })[];
        class_hash: string;
        members: {
            name: string;
            key: boolean;
            type: string;
        }[];
        kind: "DojoModel";
    }[];
}>;
type Manifest = z.infer<typeof manifestSchema>;
declare const createManifestFromJson: (content: any) => Manifest;

export { type DojoCall, type DojoConfig, DojoProvider, type IWorld, KATANA_CLASS_HASH, KATANA_ETH_CONTRACT_ADDRESS, KATANA_PREFUNDED_ADDRESS, KATANA_PREFUNDED_PRIVATE_KEY, LOCAL_KATANA, LOCAL_RELAY, LOCAL_TORII, type Manifest, WorldEntryPoints, createDojoConfig, createManifestFromJson, createModelTypedData, getContractByName, parseDojoCall, parseModelName };
